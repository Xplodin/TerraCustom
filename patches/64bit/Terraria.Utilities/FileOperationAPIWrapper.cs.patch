--- src/tModLoader/Terraria.Utilities/FileOperationAPIWrapper.cs
+++ src/64bit/Terraria.Utilities/FileOperationAPIWrapper.cs
@@ -8,12 +_,12 @@
 		[Flags]
 		private enum FileOperationFlags : ushort
 		{
-			FOF_SILENT = 0x4,
+			FOF_SILENT = 4,
-			FOF_NOCONFIRMATION = 0x10,
+			FOF_NOCONFIRMATION = 16,
-			FOF_ALLOWUNDO = 0x40,
+			FOF_ALLOWUNDO = 64,
-			FOF_SIMPLEPROGRESS = 0x100,
+			FOF_SIMPLEPROGRESS = 256,
-			FOF_NOERRORUI = 0x400,
+			FOF_NOERRORUI = 1024,
-			FOF_WANTNUKEWARNING = 0x4000
+			FOF_WANTNUKEWARNING = 16384
 		}
 
 		private enum FileOperationType : uint
@@ -24,7 +_,7 @@
 			FO_RENAME
 		}
 
-		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 1)]
+		[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
 		private struct SHFILEOPSTRUCT
 		{
 			public IntPtr hwnd;
@@ -43,38 +_,53 @@
 		private static extern int SHFileOperation(ref SHFILEOPSTRUCT FileOp);
 
 		private static bool Send(string path, FileOperationFlags flags) {
+			bool result;
 			try {
-				SHFILEOPSTRUCT sHFILEOPSTRUCT = default(SHFILEOPSTRUCT);
-				sHFILEOPSTRUCT.wFunc = FileOperationType.FO_DELETE;
-				sHFILEOPSTRUCT.pFrom = path + "\0\0";
-				sHFILEOPSTRUCT.fFlags = (FileOperationFlags.FOF_ALLOWUNDO | flags);
-				SHFILEOPSTRUCT FileOp = sHFILEOPSTRUCT;
-				SHFileOperation(ref FileOp);
-				return true;
+				SHFILEOPSTRUCT sHFILEOPSTRUCT = new SHFILEOPSTRUCT {
+					wFunc = FileOperationType.FO_DELETE,
+					pFrom = path + '\0' + '\0',
+					fFlags = FileOperationFlags.FOF_ALLOWUNDO | flags
+				};
+
+				SHFileOperation(ref sHFILEOPSTRUCT);
+				result = true;
 			}
 			catch (Exception) {
-				return false;
+				result = false;
 			}
+
+			return result;
+		}
+
+		private static bool Send(string path) {
+			return Send(path, FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_WANTNUKEWARNING);
 		}
 
-		private static bool Send(string path) => Send(path, FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_WANTNUKEWARNING);
+		public static bool MoveToRecycleBin(string path) {
-		public static bool MoveToRecycleBin(string path) => Send(path, FileOperationFlags.FOF_SILENT | FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_NOERRORUI);
+			return Send(path, FileOperationFlags.FOF_SILENT | FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_NOERRORUI);
+		}
 
 		private static bool DeleteFile(string path, FileOperationFlags flags) {
+			bool result;
 			try {
-				SHFILEOPSTRUCT sHFILEOPSTRUCT = default(SHFILEOPSTRUCT);
-				sHFILEOPSTRUCT.wFunc = FileOperationType.FO_DELETE;
-				sHFILEOPSTRUCT.pFrom = path + "\0\0";
-				sHFILEOPSTRUCT.fFlags = flags;
-				SHFILEOPSTRUCT FileOp = sHFILEOPSTRUCT;
-				SHFileOperation(ref FileOp);
-				return true;
+				SHFILEOPSTRUCT sHFILEOPSTRUCT = new SHFILEOPSTRUCT {
+					wFunc = FileOperationType.FO_DELETE,
+					pFrom = path + '\0' + '\0',
+					fFlags = flags
+				};
+
+				SHFileOperation(ref sHFILEOPSTRUCT);
+				result = true;
 			}
 			catch (Exception) {
-				return false;
+				result = false;
 			}
+
+			return result;
 		}
 
-		private static bool DeleteCompletelySilent(string path) => DeleteFile(path, FileOperationFlags.FOF_SILENT | FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_NOERRORUI);
+		private static bool DeleteCompletelySilent(string path) {
+			return DeleteFile(path, FileOperationFlags.FOF_SILENT | FileOperationFlags.FOF_NOCONFIRMATION | FileOperationFlags.FOF_NOERRORUI);
+		}
 	}
 }
